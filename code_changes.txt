commit e193b2582efbad79c10fb372329e3fe050f4ee5c
Author: Max Hager <68147541+yachty66@users.noreply.github.com>
Date:   Thu Sep 5 02:22:15 2024 +0200

    Add daily code review functionality: fetch commits since midnight, extract code changes, and generate email reports with metrics and feedback.

diff --git a/code_changes.txt b/code_changes.txt
new file mode 100644
index 0000000..bb94522
--- /dev/null
+++ b/code_changes.txt
@@ -0,0 +1,595 @@
+commit 7e6df0a0270dfaa0cfc2a87be47c790595cbbf76
+Author: Max Hager <68147541+yachty66@users.noreply.github.com>
+Date:   Thu Sep 5 02:17:45 2024 +0200
+
+    Implement daily code review functionality: fetch commits since midnight, extract code changes, and generate email reports with metrics and feedback.
+
+diff --git a/main.ipynb b/main.ipynb
+index 94f8740..e26957d 100644
+--- a/main.ipynb
++++ b/main.ipynb
+@@ -13,6 +13,464 @@
+      ]
+     }
+    ],
++   "source": [
++    "import subprocess\n",
++    "from datetime import datetime\n",
++    "\n",
++    "def get_commits_since_midnight(author):\n",
++    "    today = datetime.now().strftime('%Y-%m-%d')\n",
++    "    result = subprocess.run(\n",
++    "        ['git', 'log', '--since=midnight', '--author=' + author, '--pretty=format:%H'],\n",
++    "        capture_output=True,\n",
++    "        text=True\n",
++    "    )\n",
++    "    commit_hashes = result.stdout.splitlines()\n",
++    "    return commit_hashes\n",
++    "\n",
++    "def get_code_from_commits(commit_hashes):\n",
++    "    code_changes = []\n",
++    "    for commit in commit_hashes:\n",
++    "        result = subprocess.run(\n",
++    "            ['git', 'show', commit],\n",
++    "            capture_output=True,\n",
++    "            text=True\n",
++    "        )\n",
++    "        code_changes.append(result.stdout)\n",
++    "    return code_changes\n",
++    "\n",
++    "if __name__ == \"__main__\":\n",
++    "    author = \"yachty66\"  # Replace with your GitHub username or the name you use in your commits\n",
++    "    commits = get_commits_since_midnight(author)\n",
++    "    if commits:\n",
++    "        code_changes = get_code_from_commits(commits)\n",
++    "        for change in code_changes:\n",
++    "            print(change)\n",
++    "    else:\n",
++    "        print(\"No commits found since midnight.\")"
++   ]
++  },
++  {
++   "cell_type": "code",
++   "execution_count": 2,
++   "metadata": {},
++   "outputs": [
++    {
++     "name": "stdout",
++     "output_type": "stream",
++     "text": [
++      "commit d4cf054a1815b12caddd92b9b3f189fbb2ff4e78\n",
++      "Author: Max Hager <68147541+yachty66@users.noreply.github.com>\n",
++      "Date:   Mon Sep 2 02:17:17 2024 +0200\n",
++      "\n",
++      "    Add initial project structure for AI-powered code review application, including .gitignore, Issues documentation, and README with setup instructions. Implement core functionality for fetching code changes and generating feedback via email.\n",
++      "\n",
++      "diff --git a/.gitignore b/.gitignore\n",
++      "new file mode 100644\n",
++      "index 0000000..2eea525\n",
++      "--- /dev/null\n",
++      "+++ b/.gitignore\n",
++      "@@ -0,0 +1 @@\n",
++      "+.env\n",
++      "\\ No newline at end of file\n",
++      "diff --git a/Issues.md b/Issues.md\n",
++      "new file mode 100644\n",
++      "index 0000000..f7d5966\n",
++      "--- /dev/null\n",
++      "+++ b/Issues.md\n",
++      "@@ -0,0 +1,113 @@\n",
++      "+its an app which is sending you an daily code review on what you have been working on\n",
++      "+\n",
++      "+\n",
++      "+\n",
++      "+Key Components and Workflow\n",
++      "+\n",
++      "+GitHub Integration:\n",
++      "+Use GitHub Webhooks to trigger events when code is pushed to your repository.\n",
++      "+Webhooks can notify your server or service whenever a push event occurs.\n",
++      "+Fetching Code Changes:\n",
++      "+Once triggered, the server fetches the specific changes made in the push event.\n",
++      "+Use GitHub API to get the latest commits and the diff (changes) for each pushed file.\n",
++      "+Â \n",
++      "+Code Analysis with a Large Language Model (LLM):\n",
++      "+Feed the fetched code changes into an LLM for review.\n",
++      "+Use advanced models like GPT-4 or Claude-3.5 Sonnet for the initial implementation.\n",
++      "+Define prompts that guide the LLM on what specific aspects to consider (e.g., best practices, potential bugs, optimization).\n",
++      "+Generating Feedback:\n",
++      "+The LLM generates feedback based on your code. This might include code quality, styling issues, potential bugs, and optimization suggestions.\n",
++      "+Format the feedback in a structured manner for clarity and ease of understanding.\n",
++      "+Email Automation:\n",
++      "+Use an email service (like SendGrid, Mailgun, or even a simple SMTP setup) to send the feedback to your email address.\n",
++      "+Ensure the email is well-formatted, with clear sections for different types of feedback.\n",
++      "+\n",
++      "+this is only going to work out if i have app which can read all of the code from the user. if i for now just want to do this for me then this would be better because then i can validate it first and i have much more development speed. i can make it open source first so that others can set it up already if they want so. \n",
++      "+\n",
++      "+\n",
++      "+\n",
++      "+\n",
++      "+Subject: Daily Code Review Feedback - MyRepo - 2024-09-01\n",
++      "+\n",
++      "+Hello [Your Name],\n",
++      "+\n",
++      "+Here's your daily feedback for the latest code changes in the MyRepo repository.\n",
++      "+\n",
++      "+Summary of Changes:\n",
++      "+- Added new feature X\n",
++      "+- Fixed bug Y\n",
++      "+- Refactored component Z\n",
++      "+\n",
++      "+### Metrics:\n",
++      "+Lines of Code:\n",
++      "+- LOC Added: 150\n",
++      "+- LOC Removed: 20\n",
++      "+- Net LOC Change: +130\n",
++      "+\n",
++      "+Files Changed: \n",
++      "+- 5 files modified, 2 files added, 1 file deleted\n",
++      "+\n",
++      "+Number of Commits:\n",
++      "+- 3\n",
++      "+\n",
++      "+Complexity Metrics:\n",
++      "+- Average Cyclomatic Complexity: 3.2\n",
++      "+- Code Duplication: 5%\n",
++      "+\n",
++      "+Code Coverage:\n",
++      "+- 80% of the code is covered by tests\n",
++      "+\n",
++      "+Build Status:\n",
++      "+- Passed\n",
++      "+\n",
++      "+Test Results:\n",
++      "+- Tests Passed: 50\n",
++      "+- Tests Failed: 2\n",
++      "+\n",
++      "+Security Vulnerabilities:\n",
++      "+- 1 low-risk vulnerability found in module XYZ\n",
++      "+\n",
++      "+Performance Metrics:\n",
++      "+- Page load time improved by 15%\n",
++      "+- Memory usage decreased by 10%\n",
++      "+\n",
++      "+Technical Debt:\n",
++      "+- Reduced by 2 hours\n",
++      "+\n",
++      "+Code Review Metrics:\n",
++      "+- Time to Review: 15 minutes\n",
++      "+- Number of Review Comments: 10\n",
++      "+\n",
++      "+Dependency Updates:\n",
++      "+- Updated library ABC from version 1.0 to 1.1\n",
++      "+\n",
++      "+### Detailed Feedback:\n",
++      "+General Code Quality:\n",
++      "+- The new functions in module X are well-structured.\n",
++      "+- Consider refactoring method Y to improve readability.\n",
++      "+\n",
++      "+Potential Bugs:\n",
++      "+- In function ABC, there seems to be an unhandled edge case when the input is negative.\n",
++      "+\n",
++      "+Optimization Suggestions:\n",
++      "+- The loop in function XYZ can be optimized by using a dictionary for faster lookups.\n",
++      "+\n",
++      "+Best Practices / Style Issues:\n",
++      "+- Ensure you follow PEP 8 standards for variable naming.\n",
++      "+- Avoid using global variables in module ABC.\n",
++      "+\n",
++      "+Security Concerns:\n",
++      "+- Potential SQL injection risk in method DEF. Consider using parameterized queries.\n",
++      "+\n",
++      "+Code Snippets:\n",
++      "+In method XYZ, consider the following refactor:\n",
++      "+\n",
++      "+```python\n",
++      "+# Current code\n",
++      "+for i in range(len(arr)):\n",
++      "+    if arr[i] == target:\n",
++      "+        return i\n",
++      "+\n",
++      "+# Suggested refactor\n",
++      "+index_lookup = {value: idx for idx, value in enumerate(arr)}\n",
++      "+return index_lookup.get(target, -1)\n",
++      "diff --git a/README.md b/README.md\n",
++      "index db789a3..bbaaed4 100644\n",
++      "--- a/README.md\n",
++      "+++ b/README.md\n",
++      "@@ -1 +1,153 @@\n",
++      " # ai_code_reviewer\n",
++      "+\n",
++      "+- in the case the user did not pushed any code he is getting roasted or a motivational qoute is shared \n",
++      "+\n",
++      "+## Overview\n",
++      "+\n",
++      "+checks at the end of your day all your commited and gives you feedback on the code you commited similar to https://www.producthunt.com/products/ai-code-reviewer-2?utm_source=badge-top-post-badge&utm_medium=badge#ai-code-reviewer delivered directly to your DMs on X\n",
++      "+\n",
++      "+## Features\n",
++      "+\n",
++      "+- **Automated Code Reviews**: Get detailed feedback on code changes using AI.\n",
++      "+- **Metrics Tracking**: Provides quantitative metrics like lines of code added/removed, complexity, and test coverage.\n",
++      "+- **Email Notifications**: Receive daily email reports with comprehensive feedback and metrics.\n",
++      "+- **Customizable**: Adapt the feedback prompts, email format, and metrics as needed.\n",
++      "+\n",
++      "+## Requirements\n",
++      "+\n",
++      "+- Python 3.x\n",
++      "+- Flask\n",
++      "+- Requests\n",
++      "+- OpenAI (or the relevant SDK for your chosen LLM)\n",
++      "+- SMTP server configuration for sending emails\n",
++      "+\n",
++      "+## Installation\n",
++      "+\n",
++      "+1. **Clone the Repository**:\n",
++      "+    ```sh\n",
++      "+    git clone https://github.com/yourusername/ai-code-reviewer.git\n",
++      "+    cd ai-code-reviewer\n",
++      "+    ```\n",
++      "+\n",
++      "+2. **Install Dependencies**:\n",
++      "+    ```sh\n",
++      "+    pip install -r requirements.txt\n",
++      "+    ```\n",
++      "+\n",
++      "+3. **Set Up API Keys and Configuration**:\n",
++      "+    - Obtain an API key from your chosen LLM provider (e.g., OpenAI).\n",
++      "+    - Add your API key and email server credentials to a configuration file or environment variables.\n",
++      "+    \n",
++      "+    Example for environment variables:\n",
++      "+    ```sh\n",
++      "+    export OPENAI_API_KEY=\"your_openai_api_key\"\n",
++      "+    export EMAIL_HOST=\"smtp.example.com\"\n",
++      "+    export EMAIL_PORT=587\n",
++      "+    export EMAIL_USER=\"your_email@example.com\"\n",
++      "+    export EMAIL_PASSWORD=\"your_email_password\"\n",
++      "+    ```\n",
++      "+\n",
++      "+4. **Run the Application**:\n",
++      "+    ```sh\n",
++      "+    python app.py\n",
++      "+    ```\n",
++      "+\n",
++      "+## Usage\n",
++      "+\n",
++      "+### Webhook Configuration\n",
++      "+\n",
++      "+1. **Set Up Webhooks**:\n",
++      "+    - Configure your code repository (e.g., GitHub, GitLab) to send push events to your running Flask application.\n",
++      "+    - Example for GitHub:\n",
++      "+      - Go to your repository settings.\n",
++      "+      - Select \"Webhooks\" and click \"Add webhook\".\n",
++      "+      - Set the payload URL to your server's URL (e.g., `http://yourserver.com/webhook`).\n",
++      "+      - Choose \"application/json\" as the content type.\n",
++      "+      - Select \"Just the push event\" or other relevant events.\n",
++      "+\n",
++      "+### Handling Push Events\n",
++      "+\n",
++      "+The application listens for push events and processes code changes to generate feedback. Hereâs a sample structure for handling a push event:\n",
++      "+\n",
++      "+```python\n",
++      "+@app.route('/webhook', methods=['POST'])\n",
++      "+def webhook():\n",
++      "+    data = request.json\n",
++      "+    if data[\"action\"] == \"push\":\n",
++      "+        repo_name = data[\"repository\"][\"name\"]\n",
++      "+        commits = data[\"commits\"]\n",
++      "+        handle_push_event(repo_name, commits)\n",
++      "+    return '', 200\n",
++      "+\n",
++      "+def handle_push_event(repo_name, commits):\n",
++      "+    for commit in commits:\n",
++      "+        commit_id = commit[\"id\"]\n",
++      "+        diff = get_commit_diff(repo_name, commit_id)\n",
++      "+        review_feedback = get_code_review_feedback(diff)\n",
++      "+        send_email_with_feedback(diff, review_feedback)\n",
++      "+```\n",
++      "+\n",
++      "+### Email Structure\n",
++      "+\n",
++      "+Emails sent by the application are structured as follows:\n",
++      "+\n",
++      "+- **Introduction**\n",
++      "+- **Summary of Changes**\n",
++      "+- **AI-Generated Detailed Feedback**\n",
++      "+- **Metrics and Other Information**\n",
++      "+- **Closing Remarks**\n",
++      "+\n",
++      "+Example email content is provided in the script.\n",
++      "+\n",
++      "+## Configuration\n",
++      "+\n",
++      "+You can customize the prompts, email format, and various metrics tracked by editing the respective sections of the code. \n",
++      "+\n",
++      "+### Customizing Prompts\n",
++      "+\n",
++      "+```python\n",
++      "+def get_code_review_feedback(code_diff):\n",
++      "+    prompt = f\"\"\"\n",
++      "+    You are a senior software engineer. Please review the following code changes and provide detailed feedback on code quality, potential bugs, optimization suggestions, and best practices.\n",
++      "+    \n",
++      "+    Code changes:\n",
++      "+    {code_diff}\n",
++      "+    \"\"\"\n",
++      "+    \n",
++      "+    response = openai.Completion.create(\n",
++      "+        engine=\"gpt-4\",\n",
++      "+        prompt=prompt,\n",
++      "+        max_tokens=1500,\n",
++      "+        temperature=0.5,\n",
++      "+    )\n",
++      "+    \n",
++      "+    feedback = response.choices[0].text.strip()\n",
++      "+    return feedback\n",
++      "+```\n",
++      "+\n",
++      "+### Setting Up SMTP for Email Notifications\n",
++      "+\n",
++      "+Configure your email credentials and SMTP server details to enable email notifications. Example SMTP setup is provided in the script.\n",
++      "+\n",
++      "+## Contribution\n",
++      "+\n",
++      "+Contributions are welcome! Please fork the repository and submit a pull request for any enhancements or bug fixes.\n",
++      "+\n",
++      "+## License\n",
++      "+\n",
++      "+This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
++      "+```\n",
++      "+\n",
++      "+### Contact\n",
++      "+\n",
++      "+For any questions or issues, please [open an issue](https://github.com/yourusername/ai-code-reviewer/issues) or reach out to [your_email@example.com](mailto:your_email@example.com).\n",
++      "+\n",
++      "+## Acknowledgements\n",
++      "+\n",
++      "+- [OpenAI](https://www.openai.com/) for the GPT-4 model.\n",
++      "+- [Flask](https://flask.palletsprojects.com/en/2.0.x/) for the web server.\n",
++      "+\n",
++      "+```\n",
++      "+\n",
++      "+Replace placeholders with actual information like your repository URL, email, and any specific configurations related to your project. This README provides a comprehensive guide to setting up, running, and customizing your AI-powered code review application.\n",
++      "+\n",
++      "diff --git a/ai.py b/ai.py\n",
++      "new file mode 100644\n",
++      "index 0000000..e69de29\n",
++      "diff --git a/code_diff.py b/code_diff.py\n",
++      "new file mode 100644\n",
++      "index 0000000..e69de29\n",
++      "diff --git a/email.py b/email.py\n",
++      "new file mode 100644\n",
++      "index 0000000..e69de29\n",
++      "diff --git a/main.ipynb b/main.ipynb\n",
++      "new file mode 100644\n",
++      "index 0000000..94f8740\n",
++      "--- /dev/null\n",
++      "+++ b/main.ipynb\n",
++      "@@ -0,0 +1,100 @@\n",
++      "+{\n",
++      "+ \"cells\": [\n",
++      "+  {\n",
++      "+   \"cell_type\": \"code\",\n",
++      "+   \"execution_count\": 1,\n",
++      "+   \"metadata\": {},\n",
++      "+   \"outputs\": [\n",
++      "+    {\n",
++      "+     \"name\": \"stdout\",\n",
++      "+     \"output_type\": \"stream\",\n",
++      "+     \"text\": [\n",
++      "+      \"No commits found since midnight.\\n\"\n",
++      "+     ]\n",
++      "+    }\n",
++      "+   ],\n",
++      "+   \"source\": [\n",
++      "+    \"#get all the code a user generated on a day\\n\",\n",
++      "+    \"import subprocess\\n\",\n",
++      "+    \"from datetime import datetime\\n\",\n",
++      "+    \"\\n\",\n",
++      "+    \"def get_commits_since_midnight():\\n\",\n",
++      "+    \"    # Get the current date in YYYY-MM-DD format\\n\",\n",
++      "+    \"    today = datetime.now().strftime('%Y-%m-%d')\\n\",\n",
++      "+    \"    \\n\",\n",
++      "+    \"    # Run the git log command to get commits since midnight\\n\",\n",
++      "+    \"    result = subprocess.run(\\n\",\n",
++      "+    \"        ['git', 'log', '--since=midnight', '--pretty=format:%H'],\\n\",\n",
++      "+    \"        capture_output=True,\\n\",\n",
++      "+    \"        text=True\\n\",\n",
++      "+    \"    )\\n\",\n",
++      "+    \"    \\n\",\n",
++      "+    \"    # Split the result by newlines to get individual commit hashes\\n\",\n",
++      "+    \"    commit_hashes = result.stdout.splitlines()\\n\",\n",
++      "+    \"    \\n\",\n",
++      "+    \"    return commit_hashes\\n\",\n",
++      "+    \"\\n\",\n",
++      "+    \"def get_code_from_commits(commit_hashes):\\n\",\n",
++      "+    \"    code_changes = []\\n\",\n",
++      "+    \"    for commit in commit_hashes:\\n\",\n",
++      "+    \"        # Get the diff for each commit\\n\",\n",
++      "+    \"        result = subprocess.run(\\n\",\n",
++      "+    \"            ['git', 'show', commit],\\n\",\n",
++      "+    \"            capture_output=True,\\n\",\n",
++      "+    \"            text=True\\n\",\n",
++      "+    \"        )\\n\",\n",
++      "+    \"        code_changes.append(result.stdout)\\n\",\n",
++      "+    \"    \\n\",\n",
++      "+    \"    return code_changes\\n\",\n",
++      "+    \"\\n\",\n",
++      "+    \"if __name__ == \\\"__main__\\\":\\n\",\n",
++      "+    \"    commits = get_commits_since_midnight()\\n\",\n",
++      "+    \"    if commits:\\n\",\n",
++      "+    \"        code_changes = get_code_from_commits(commits)\\n\",\n",
++      "+    \"        for change in code_changes:\\n\",\n",
++      "+    \"            print(change)\\n\",\n",
++      "+    \"    else:\\n\",\n",
++      "+    \"        print(\\\"No commits found since midnight.\\\")\\n\"\n",
++      "+   ]\n",
++      "+  },\n",
++      "+  {\n",
++      "+   \"cell_type\": \"code\",\n",
++      "+   \"execution_count\": null,\n",
++      "+   \"metadata\": {},\n",
++      "+   \"outputs\": [],\n",
++      "+   \"source\": [\n",
++      "+    \"#generate message for email\"\n",
++      "+   ]\n",
++      "+  },\n",
++      "+  {\n",
++      "+   \"cell_type\": \"code\",\n",
++      "+   \"execution_count\": null,\n",
++      "+   \"metadata\": {},\n",
++      "+   \"outputs\": [],\n",
++      "+   \"source\": [\n",
++      "+    \"#send formatted email\"\n",
++      "+   ]\n",
++      "+  }\n",
++      "+ ],\n",
++      "+ \"metadata\": {\n",
++      "+  \"kernelspec\": {\n",
++      "+   \"display_name\": \"base\",\n",
++      "+   \"language\": \"python\",\n",
++      "+   \"name\": \"python3\"\n",
++      "+  },\n",
++      "+  \"language_info\": {\n",
++      "+   \"codemirror_mode\": {\n",
++      "+    \"name\": \"ipython\",\n",
++      "+    \"version\": 3\n",
++      "+   },\n",
++      "+   \"file_extension\": \".py\",\n",
++      "+   \"mimetype\": \"text/x-python\",\n",
++      "+   \"name\": \"python\",\n",
++      "+   \"nbconvert_exporter\": \"python\",\n",
++      "+   \"pygments_lexer\": \"ipython3\",\n",
++      "+   \"version\": \"3.11.9\"\n",
++      "+  }\n",
++      "+ },\n",
++      "+ \"nbformat\": 4,\n",
++      "+ \"nbformat_minor\": 2\n",
++      "+}\n",
++      "diff --git a/main.py b/main.py\n",
++      "new file mode 100644\n",
++      "index 0000000..e69de29\n",
++      "\n"
++     ]
++    }
++   ],
+    "source": [
+     "#get all the code a user generated on a day\n",
+     "import subprocess\n",
+@@ -63,7 +521,83 @@
+    "metadata": {},
+    "outputs": [],
+    "source": [
+-    "#generate message for email"
++    "#generate message for email\n",
++    "\n",
++    "#now i have all the code, next i need to deal with it \n",
++    "import subprocess\n",
++    "from datetime import datetime\n",
++    "\n",
++    "def get_commits_since_midnight():\n",
++    "    today = datetime.now().strftime('%Y-%m-%d')\n",
++    "    result = subprocess.run(\n",
++    "        ['git', 'log', '--since=midnight', '--pretty=format:%H'],\n",
++    "        capture_output=True,\n",
++    "        text=True\n",
++    "    )\n",
++    "    commit_hashes = result.stdout.splitlines()\n",
++    "    return commit_hashes\n",
++    "\n",
++    "def get_code_from_commits(commit_hashes):\n",
++    "    code_changes = []\n",
++    "    for commit in commit_hashes:\n",
++    "        result = subprocess.run(\n",
++    "            ['git', 'show', commit],\n",
++    "            capture_output=True,\n",
++    "            text=True\n",
++    "        )\n",
++    "        code_changes.append(result.stdout)\n",
++    "    return code_changes\n",
++    "\n",
++    "def extract_metrics_from_diff(diff):\n",
++    "    lines_added = 0\n",
++    "    lines_removed = 0\n",
++    "    files_changed = set()\n",
++    "    for line in diff.splitlines():\n",
++    "        if line.startswith('+++ b/'):\n",
++    "            files_changed.add(line[6:])\n",
++    "        elif line.startswith('--- a/'):\n",
++    "            files_changed.add(line[6:])\n",
++    "        elif line.startswith('+') and not line.startswith('+++'):\n",
++    "            lines_added += 1\n",
++    "        elif line.startswith('-') and not line.startswith('---'):\n",
++    "            lines_removed += 1\n",
++    "    return lines_added, lines_removed, files_changed\n",
++    "\n",
++    "def generate_email_report(commits, code_changes):\n",
++    "    total_lines_added = 0\n",
++    "    total_lines_removed = 0\n",
++    "    all_files_changed = set()\n",
++    "    \n",
++    "    for change in code_changes:\n",
++    "        lines_added, lines_removed, files_changed = extract_metrics_from_diff(change)\n",
++    "        total_lines_added += lines_added\n",
++    "        total_lines_removed += lines_removed\n",
++    "        all_files_changed.update(files_changed)\n",
++    "    \n",
++    "    email_content = f\"\"\"\n",
++    "    Daily Code Review Feedback - {datetime.now().strftime('%Y-%m-%d')}\n",
++    "    \n",
++    "    Summary of Changes:\n",
++    "    - Lines of Code Added: {total_lines_added}\n",
++    "    - Lines of Code Removed: {total_lines_removed}\n",
++    "    - Net LOC Change: {total_lines_added - total_lines_removed}\n",
++    "    - Files Changed: {len(all_files_changed)}\n",
++    "    - Number of Commits: {len(commits)}\n",
++    "    \n",
++    "    Detailed Feedback:\n",
++    "    (Add your detailed feedback here)\n",
++    "    \"\"\"\n",
++    "    \n",
++    "    return email_content\n",
++    "\n",
++    "if __name__ == \"__main__\":\n",
++    "    commits = get_commits_since_midnight()\n",
++    "    if commits:\n",
++    "        code_changes = get_code_from_commits(commits)\n",
++    "        email_report = generate_email_report(commits, code_changes)\n",
++    "        print(email_report)\n",
++    "    else:\n",
++    "        print(\"No commits found since midnight.\")"
+    ]
+   },
+   {
+@@ -71,9 +605,7 @@
+    "execution_count": null,
+    "metadata": {},
+    "outputs": [],
+-   "source": [
+-    "#send formatted email"
+-   ]
++   "source": []
+   }
+  ],
+  "metadata": {
+diff --git a/test.mermaid b/test.mermaid
+new file mode 100644
+index 0000000..41fff2a
+--- /dev/null
++++ b/test.mermaid
+@@ -0,0 +1,16 @@
++graph TD
++A[User Pushes Code to Repository] -->|Webhook Triggered| B[Flask Application Receives Webhook]
++B --> C[Fetch Commits Since Midnight]
++C --> D[Get Code Diffs for Commits]
++D --> E[Extract Metrics from Code Diffs]
++E --> F[Generate Email Report]
++F --> G[Send Email with Feedback]
++
++subgraph "Codebase"
++    B
++    C
++    D
++    E
++    F
++    G
++end
+\ No newline at end of file
+
diff --git a/main.ipynb b/main.ipynb
index e26957d..6572396 100644
--- a/main.ipynb
+++ b/main.ipynb
@@ -2,17 +2,9 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 3,
    "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "No commits found since midnight.\n"
-     ]
-    }
-   ],
+   "outputs": [],
    "source": [
     "import subprocess\n",
     "from datetime import datetime\n",
@@ -43,10 +35,13 @@
     "    commits = get_commits_since_midnight(author)\n",
     "    if commits:\n",
     "        code_changes = get_code_from_commits(commits)\n",
-    "        for change in code_changes:\n",
-    "            print(change)\n",
+    "        with open('code_changes.txt', 'w') as file:\n",
+    "            for change in code_changes:\n",
+    "                file.write(change + '\\n')\n",
     "    else:\n",
-    "        print(\"No commits found since midnight.\")"
+    "        with open('code_changes.txt', 'w') as file:\n",
+    "            file.write(\"No commits found since midnight.\\n\")\n",
+    "#need all commits and then i can put them into a list and then i can put each commit into llm. need to chunk commits eventually"
    ]
   },
   {
@@ -512,7 +507,10 @@
     "        for change in code_changes:\n",
     "            print(change)\n",
     "    else:\n",
-    "        print(\"No commits found since midnight.\")\n"
+    "        print(\"No commits found since midnight.\")\n",
+    "\n",
+    "#main challenge is to find out a way to analyze the code in a smart way somewhow \n",
+    "#\n"
    ]
   },
   {

commit 7e6df0a0270dfaa0cfc2a87be47c790595cbbf76
Author: Max Hager <68147541+yachty66@users.noreply.github.com>
Date:   Thu Sep 5 02:17:45 2024 +0200

    Implement daily code review functionality: fetch commits since midnight, extract code changes, and generate email reports with metrics and feedback.

diff --git a/main.ipynb b/main.ipynb
index 94f8740..e26957d 100644
--- a/main.ipynb
+++ b/main.ipynb
@@ -13,6 +13,464 @@
      ]
     }
    ],
+   "source": [
+    "import subprocess\n",
+    "from datetime import datetime\n",
+    "\n",
+    "def get_commits_since_midnight(author):\n",
+    "    today = datetime.now().strftime('%Y-%m-%d')\n",
+    "    result = subprocess.run(\n",
+    "        ['git', 'log', '--since=midnight', '--author=' + author, '--pretty=format:%H'],\n",
+    "        capture_output=True,\n",
+    "        text=True\n",
+    "    )\n",
+    "    commit_hashes = result.stdout.splitlines()\n",
+    "    return commit_hashes\n",
+    "\n",
+    "def get_code_from_commits(commit_hashes):\n",
+    "    code_changes = []\n",
+    "    for commit in commit_hashes:\n",
+    "        result = subprocess.run(\n",
+    "            ['git', 'show', commit],\n",
+    "            capture_output=True,\n",
+    "            text=True\n",
+    "        )\n",
+    "        code_changes.append(result.stdout)\n",
+    "    return code_changes\n",
+    "\n",
+    "if __name__ == \"__main__\":\n",
+    "    author = \"yachty66\"  # Replace with your GitHub username or the name you use in your commits\n",
+    "    commits = get_commits_since_midnight(author)\n",
+    "    if commits:\n",
+    "        code_changes = get_code_from_commits(commits)\n",
+    "        for change in code_changes:\n",
+    "            print(change)\n",
+    "    else:\n",
+    "        print(\"No commits found since midnight.\")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "commit d4cf054a1815b12caddd92b9b3f189fbb2ff4e78\n",
+      "Author: Max Hager <68147541+yachty66@users.noreply.github.com>\n",
+      "Date:   Mon Sep 2 02:17:17 2024 +0200\n",
+      "\n",
+      "    Add initial project structure for AI-powered code review application, including .gitignore, Issues documentation, and README with setup instructions. Implement core functionality for fetching code changes and generating feedback via email.\n",
+      "\n",
+      "diff --git a/.gitignore b/.gitignore\n",
+      "new file mode 100644\n",
+      "index 0000000..2eea525\n",
+      "--- /dev/null\n",
+      "+++ b/.gitignore\n",
+      "@@ -0,0 +1 @@\n",
+      "+.env\n",
+      "\\ No newline at end of file\n",
+      "diff --git a/Issues.md b/Issues.md\n",
+      "new file mode 100644\n",
+      "index 0000000..f7d5966\n",
+      "--- /dev/null\n",
+      "+++ b/Issues.md\n",
+      "@@ -0,0 +1,113 @@\n",
+      "+its an app which is sending you an daily code review on what you have been working on\n",
+      "+\n",
+      "+\n",
+      "+\n",
+      "+Key Components and Workflow\n",
+      "+\n",
+      "+GitHub Integration:\n",
+      "+Use GitHub Webhooks to trigger events when code is pushed to your repository.\n",
+      "+Webhooks can notify your server or service whenever a push event occurs.\n",
+      "+Fetching Code Changes:\n",
+      "+Once triggered, the server fetches the specific changes made in the push event.\n",
+      "+Use GitHub API to get the latest commits and the diff (changes) for each pushed file.\n",
+      "+Â \n",
+      "+Code Analysis with a Large Language Model (LLM):\n",
+      "+Feed the fetched code changes into an LLM for review.\n",
+      "+Use advanced models like GPT-4 or Claude-3.5 Sonnet for the initial implementation.\n",
+      "+Define prompts that guide the LLM on what specific aspects to consider (e.g., best practices, potential bugs, optimization).\n",
+      "+Generating Feedback:\n",
+      "+The LLM generates feedback based on your code. This might include code quality, styling issues, potential bugs, and optimization suggestions.\n",
+      "+Format the feedback in a structured manner for clarity and ease of understanding.\n",
+      "+Email Automation:\n",
+      "+Use an email service (like SendGrid, Mailgun, or even a simple SMTP setup) to send the feedback to your email address.\n",
+      "+Ensure the email is well-formatted, with clear sections for different types of feedback.\n",
+      "+\n",
+      "+this is only going to work out if i have app which can read all of the code from the user. if i for now just want to do this for me then this would be better because then i can validate it first and i have much more development speed. i can make it open source first so that others can set it up already if they want so. \n",
+      "+\n",
+      "+\n",
+      "+\n",
+      "+\n",
+      "+Subject: Daily Code Review Feedback - MyRepo - 2024-09-01\n",
+      "+\n",
+      "+Hello [Your Name],\n",
+      "+\n",
+      "+Here's your daily feedback for the latest code changes in the MyRepo repository.\n",
+      "+\n",
+      "+Summary of Changes:\n",
+      "+- Added new feature X\n",
+      "+- Fixed bug Y\n",
+      "+- Refactored component Z\n",
+      "+\n",
+      "+### Metrics:\n",
+      "+Lines of Code:\n",
+      "+- LOC Added: 150\n",
+      "+- LOC Removed: 20\n",
+      "+- Net LOC Change: +130\n",
+      "+\n",
+      "+Files Changed: \n",
+      "+- 5 files modified, 2 files added, 1 file deleted\n",
+      "+\n",
+      "+Number of Commits:\n",
+      "+- 3\n",
+      "+\n",
+      "+Complexity Metrics:\n",
+      "+- Average Cyclomatic Complexity: 3.2\n",
+      "+- Code Duplication: 5%\n",
+      "+\n",
+      "+Code Coverage:\n",
+      "+- 80% of the code is covered by tests\n",
+      "+\n",
+      "+Build Status:\n",
+      "+- Passed\n",
+      "+\n",
+      "+Test Results:\n",
+      "+- Tests Passed: 50\n",
+      "+- Tests Failed: 2\n",
+      "+\n",
+      "+Security Vulnerabilities:\n",
+      "+- 1 low-risk vulnerability found in module XYZ\n",
+      "+\n",
+      "+Performance Metrics:\n",
+      "+- Page load time improved by 15%\n",
+      "+- Memory usage decreased by 10%\n",
+      "+\n",
+      "+Technical Debt:\n",
+      "+- Reduced by 2 hours\n",
+      "+\n",
+      "+Code Review Metrics:\n",
+      "+- Time to Review: 15 minutes\n",
+      "+- Number of Review Comments: 10\n",
+      "+\n",
+      "+Dependency Updates:\n",
+      "+- Updated library ABC from version 1.0 to 1.1\n",
+      "+\n",
+      "+### Detailed Feedback:\n",
+      "+General Code Quality:\n",
+      "+- The new functions in module X are well-structured.\n",
+      "+- Consider refactoring method Y to improve readability.\n",
+      "+\n",
+      "+Potential Bugs:\n",
+      "+- In function ABC, there seems to be an unhandled edge case when the input is negative.\n",
+      "+\n",
+      "+Optimization Suggestions:\n",
+      "+- The loop in function XYZ can be optimized by using a dictionary for faster lookups.\n",
+      "+\n",
+      "+Best Practices / Style Issues:\n",
+      "+- Ensure you follow PEP 8 standards for variable naming.\n",
+      "+- Avoid using global variables in module ABC.\n",
+      "+\n",
+      "+Security Concerns:\n",
+      "+- Potential SQL injection risk in method DEF. Consider using parameterized queries.\n",
+      "+\n",
+      "+Code Snippets:\n",
+      "+In method XYZ, consider the following refactor:\n",
+      "+\n",
+      "+```python\n",
+      "+# Current code\n",
+      "+for i in range(len(arr)):\n",
+      "+    if arr[i] == target:\n",
+      "+        return i\n",
+      "+\n",
+      "+# Suggested refactor\n",
+      "+index_lookup = {value: idx for idx, value in enumerate(arr)}\n",
+      "+return index_lookup.get(target, -1)\n",
+      "diff --git a/README.md b/README.md\n",
+      "index db789a3..bbaaed4 100644\n",
+      "--- a/README.md\n",
+      "+++ b/README.md\n",
+      "@@ -1 +1,153 @@\n",
+      " # ai_code_reviewer\n",
+      "+\n",
+      "+- in the case the user did not pushed any code he is getting roasted or a motivational qoute is shared \n",
+      "+\n",
+      "+## Overview\n",
+      "+\n",
+      "+checks at the end of your day all your commited and gives you feedback on the code you commited similar to https://www.producthunt.com/products/ai-code-reviewer-2?utm_source=badge-top-post-badge&utm_medium=badge#ai-code-reviewer delivered directly to your DMs on X\n",
+      "+\n",
+      "+## Features\n",
+      "+\n",
+      "+- **Automated Code Reviews**: Get detailed feedback on code changes using AI.\n",
+      "+- **Metrics Tracking**: Provides quantitative metrics like lines of code added/removed, complexity, and test coverage.\n",
+      "+- **Email Notifications**: Receive daily email reports with comprehensive feedback and metrics.\n",
+      "+- **Customizable**: Adapt the feedback prompts, email format, and metrics as needed.\n",
+      "+\n",
+      "+## Requirements\n",
+      "+\n",
+      "+- Python 3.x\n",
+      "+- Flask\n",
+      "+- Requests\n",
+      "+- OpenAI (or the relevant SDK for your chosen LLM)\n",
+      "+- SMTP server configuration for sending emails\n",
+      "+\n",
+      "+## Installation\n",
+      "+\n",
+      "+1. **Clone the Repository**:\n",
+      "+    ```sh\n",
+      "+    git clone https://github.com/yourusername/ai-code-reviewer.git\n",
+      "+    cd ai-code-reviewer\n",
+      "+    ```\n",
+      "+\n",
+      "+2. **Install Dependencies**:\n",
+      "+    ```sh\n",
+      "+    pip install -r requirements.txt\n",
+      "+    ```\n",
+      "+\n",
+      "+3. **Set Up API Keys and Configuration**:\n",
+      "+    - Obtain an API key from your chosen LLM provider (e.g., OpenAI).\n",
+      "+    - Add your API key and email server credentials to a configuration file or environment variables.\n",
+      "+    \n",
+      "+    Example for environment variables:\n",
+      "+    ```sh\n",
+      "+    export OPENAI_API_KEY=\"your_openai_api_key\"\n",
+      "+    export EMAIL_HOST=\"smtp.example.com\"\n",
+      "+    export EMAIL_PORT=587\n",
+      "+    export EMAIL_USER=\"your_email@example.com\"\n",
+      "+    export EMAIL_PASSWORD=\"your_email_password\"\n",
+      "+    ```\n",
+      "+\n",
+      "+4. **Run the Application**:\n",
+      "+    ```sh\n",
+      "+    python app.py\n",
+      "+    ```\n",
+      "+\n",
+      "+## Usage\n",
+      "+\n",
+      "+### Webhook Configuration\n",
+      "+\n",
+      "+1. **Set Up Webhooks**:\n",
+      "+    - Configure your code repository (e.g., GitHub, GitLab) to send push events to your running Flask application.\n",
+      "+    - Example for GitHub:\n",
+      "+      - Go to your repository settings.\n",
+      "+      - Select \"Webhooks\" and click \"Add webhook\".\n",
+      "+      - Set the payload URL to your server's URL (e.g., `http://yourserver.com/webhook`).\n",
+      "+      - Choose \"application/json\" as the content type.\n",
+      "+      - Select \"Just the push event\" or other relevant events.\n",
+      "+\n",
+      "+### Handling Push Events\n",
+      "+\n",
+      "+The application listens for push events and processes code changes to generate feedback. Hereâs a sample structure for handling a push event:\n",
+      "+\n",
+      "+```python\n",
+      "+@app.route('/webhook', methods=['POST'])\n",
+      "+def webhook():\n",
+      "+    data = request.json\n",
+      "+    if data[\"action\"] == \"push\":\n",
+      "+        repo_name = data[\"repository\"][\"name\"]\n",
+      "+        commits = data[\"commits\"]\n",
+      "+        handle_push_event(repo_name, commits)\n",
+      "+    return '', 200\n",
+      "+\n",
+      "+def handle_push_event(repo_name, commits):\n",
+      "+    for commit in commits:\n",
+      "+        commit_id = commit[\"id\"]\n",
+      "+        diff = get_commit_diff(repo_name, commit_id)\n",
+      "+        review_feedback = get_code_review_feedback(diff)\n",
+      "+        send_email_with_feedback(diff, review_feedback)\n",
+      "+```\n",
+      "+\n",
+      "+### Email Structure\n",
+      "+\n",
+      "+Emails sent by the application are structured as follows:\n",
+      "+\n",
+      "+- **Introduction**\n",
+      "+- **Summary of Changes**\n",
+      "+- **AI-Generated Detailed Feedback**\n",
+      "+- **Metrics and Other Information**\n",
+      "+- **Closing Remarks**\n",
+      "+\n",
+      "+Example email content is provided in the script.\n",
+      "+\n",
+      "+## Configuration\n",
+      "+\n",
+      "+You can customize the prompts, email format, and various metrics tracked by editing the respective sections of the code. \n",
+      "+\n",
+      "+### Customizing Prompts\n",
+      "+\n",
+      "+```python\n",
+      "+def get_code_review_feedback(code_diff):\n",
+      "+    prompt = f\"\"\"\n",
+      "+    You are a senior software engineer. Please review the following code changes and provide detailed feedback on code quality, potential bugs, optimization suggestions, and best practices.\n",
+      "+    \n",
+      "+    Code changes:\n",
+      "+    {code_diff}\n",
+      "+    \"\"\"\n",
+      "+    \n",
+      "+    response = openai.Completion.create(\n",
+      "+        engine=\"gpt-4\",\n",
+      "+        prompt=prompt,\n",
+      "+        max_tokens=1500,\n",
+      "+        temperature=0.5,\n",
+      "+    )\n",
+      "+    \n",
+      "+    feedback = response.choices[0].text.strip()\n",
+      "+    return feedback\n",
+      "+```\n",
+      "+\n",
+      "+### Setting Up SMTP for Email Notifications\n",
+      "+\n",
+      "+Configure your email credentials and SMTP server details to enable email notifications. Example SMTP setup is provided in the script.\n",
+      "+\n",
+      "+## Contribution\n",
+      "+\n",
+      "+Contributions are welcome! Please fork the repository and submit a pull request for any enhancements or bug fixes.\n",
+      "+\n",
+      "+## License\n",
+      "+\n",
+      "+This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
+      "+```\n",
+      "+\n",
+      "+### Contact\n",
+      "+\n",
+      "+For any questions or issues, please [open an issue](https://github.com/yourusername/ai-code-reviewer/issues) or reach out to [your_email@example.com](mailto:your_email@example.com).\n",
+      "+\n",
+      "+## Acknowledgements\n",
+      "+\n",
+      "+- [OpenAI](https://www.openai.com/) for the GPT-4 model.\n",
+      "+- [Flask](https://flask.palletsprojects.com/en/2.0.x/) for the web server.\n",
+      "+\n",
+      "+```\n",
+      "+\n",
+      "+Replace placeholders with actual information like your repository URL, email, and any specific configurations related to your project. This README provides a comprehensive guide to setting up, running, and customizing your AI-powered code review application.\n",
+      "+\n",
+      "diff --git a/ai.py b/ai.py\n",
+      "new file mode 100644\n",
+      "index 0000000..e69de29\n",
+      "diff --git a/code_diff.py b/code_diff.py\n",
+      "new file mode 100644\n",
+      "index 0000000..e69de29\n",
+      "diff --git a/email.py b/email.py\n",
+      "new file mode 100644\n",
+      "index 0000000..e69de29\n",
+      "diff --git a/main.ipynb b/main.ipynb\n",
+      "new file mode 100644\n",
+      "index 0000000..94f8740\n",
+      "--- /dev/null\n",
+      "+++ b/main.ipynb\n",
+      "@@ -0,0 +1,100 @@\n",
+      "+{\n",
+      "+ \"cells\": [\n",
+      "+  {\n",
+      "+   \"cell_type\": \"code\",\n",
+      "+   \"execution_count\": 1,\n",
+      "+   \"metadata\": {},\n",
+      "+   \"outputs\": [\n",
+      "+    {\n",
+      "+     \"name\": \"stdout\",\n",
+      "+     \"output_type\": \"stream\",\n",
+      "+     \"text\": [\n",
+      "+      \"No commits found since midnight.\\n\"\n",
+      "+     ]\n",
+      "+    }\n",
+      "+   ],\n",
+      "+   \"source\": [\n",
+      "+    \"#get all the code a user generated on a day\\n\",\n",
+      "+    \"import subprocess\\n\",\n",
+      "+    \"from datetime import datetime\\n\",\n",
+      "+    \"\\n\",\n",
+      "+    \"def get_commits_since_midnight():\\n\",\n",
+      "+    \"    # Get the current date in YYYY-MM-DD format\\n\",\n",
+      "+    \"    today = datetime.now().strftime('%Y-%m-%d')\\n\",\n",
+      "+    \"    \\n\",\n",
+      "+    \"    # Run the git log command to get commits since midnight\\n\",\n",
+      "+    \"    result = subprocess.run(\\n\",\n",
+      "+    \"        ['git', 'log', '--since=midnight', '--pretty=format:%H'],\\n\",\n",
+      "+    \"        capture_output=True,\\n\",\n",
+      "+    \"        text=True\\n\",\n",
+      "+    \"    )\\n\",\n",
+      "+    \"    \\n\",\n",
+      "+    \"    # Split the result by newlines to get individual commit hashes\\n\",\n",
+      "+    \"    commit_hashes = result.stdout.splitlines()\\n\",\n",
+      "+    \"    \\n\",\n",
+      "+    \"    return commit_hashes\\n\",\n",
+      "+    \"\\n\",\n",
+      "+    \"def get_code_from_commits(commit_hashes):\\n\",\n",
+      "+    \"    code_changes = []\\n\",\n",
+      "+    \"    for commit in commit_hashes:\\n\",\n",
+      "+    \"        # Get the diff for each commit\\n\",\n",
+      "+    \"        result = subprocess.run(\\n\",\n",
+      "+    \"            ['git', 'show', commit],\\n\",\n",
+      "+    \"            capture_output=True,\\n\",\n",
+      "+    \"            text=True\\n\",\n",
+      "+    \"        )\\n\",\n",
+      "+    \"        code_changes.append(result.stdout)\\n\",\n",
+      "+    \"    \\n\",\n",
+      "+    \"    return code_changes\\n\",\n",
+      "+    \"\\n\",\n",
+      "+    \"if __name__ == \\\"__main__\\\":\\n\",\n",
+      "+    \"    commits = get_commits_since_midnight()\\n\",\n",
+      "+    \"    if commits:\\n\",\n",
+      "+    \"        code_changes = get_code_from_commits(commits)\\n\",\n",
+      "+    \"        for change in code_changes:\\n\",\n",
+      "+    \"            print(change)\\n\",\n",
+      "+    \"    else:\\n\",\n",
+      "+    \"        print(\\\"No commits found since midnight.\\\")\\n\"\n",
+      "+   ]\n",
+      "+  },\n",
+      "+  {\n",
+      "+   \"cell_type\": \"code\",\n",
+      "+   \"execution_count\": null,\n",
+      "+   \"metadata\": {},\n",
+      "+   \"outputs\": [],\n",
+      "+   \"source\": [\n",
+      "+    \"#generate message for email\"\n",
+      "+   ]\n",
+      "+  },\n",
+      "+  {\n",
+      "+   \"cell_type\": \"code\",\n",
+      "+   \"execution_count\": null,\n",
+      "+   \"metadata\": {},\n",
+      "+   \"outputs\": [],\n",
+      "+   \"source\": [\n",
+      "+    \"#send formatted email\"\n",
+      "+   ]\n",
+      "+  }\n",
+      "+ ],\n",
+      "+ \"metadata\": {\n",
+      "+  \"kernelspec\": {\n",
+      "+   \"display_name\": \"base\",\n",
+      "+   \"language\": \"python\",\n",
+      "+   \"name\": \"python3\"\n",
+      "+  },\n",
+      "+  \"language_info\": {\n",
+      "+   \"codemirror_mode\": {\n",
+      "+    \"name\": \"ipython\",\n",
+      "+    \"version\": 3\n",
+      "+   },\n",
+      "+   \"file_extension\": \".py\",\n",
+      "+   \"mimetype\": \"text/x-python\",\n",
+      "+   \"name\": \"python\",\n",
+      "+   \"nbconvert_exporter\": \"python\",\n",
+      "+   \"pygments_lexer\": \"ipython3\",\n",
+      "+   \"version\": \"3.11.9\"\n",
+      "+  }\n",
+      "+ },\n",
+      "+ \"nbformat\": 4,\n",
+      "+ \"nbformat_minor\": 2\n",
+      "+}\n",
+      "diff --git a/main.py b/main.py\n",
+      "new file mode 100644\n",
+      "index 0000000..e69de29\n",
+      "\n"
+     ]
+    }
+   ],
    "source": [
     "#get all the code a user generated on a day\n",
     "import subprocess\n",
@@ -63,7 +521,83 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "#generate message for email"
+    "#generate message for email\n",
+    "\n",
+    "#now i have all the code, next i need to deal with it \n",
+    "import subprocess\n",
+    "from datetime import datetime\n",
+    "\n",
+    "def get_commits_since_midnight():\n",
+    "    today = datetime.now().strftime('%Y-%m-%d')\n",
+    "    result = subprocess.run(\n",
+    "        ['git', 'log', '--since=midnight', '--pretty=format:%H'],\n",
+    "        capture_output=True,\n",
+    "        text=True\n",
+    "    )\n",
+    "    commit_hashes = result.stdout.splitlines()\n",
+    "    return commit_hashes\n",
+    "\n",
+    "def get_code_from_commits(commit_hashes):\n",
+    "    code_changes = []\n",
+    "    for commit in commit_hashes:\n",
+    "        result = subprocess.run(\n",
+    "            ['git', 'show', commit],\n",
+    "            capture_output=True,\n",
+    "            text=True\n",
+    "        )\n",
+    "        code_changes.append(result.stdout)\n",
+    "    return code_changes\n",
+    "\n",
+    "def extract_metrics_from_diff(diff):\n",
+    "    lines_added = 0\n",
+    "    lines_removed = 0\n",
+    "    files_changed = set()\n",
+    "    for line in diff.splitlines():\n",
+    "        if line.startswith('+++ b/'):\n",
+    "            files_changed.add(line[6:])\n",
+    "        elif line.startswith('--- a/'):\n",
+    "            files_changed.add(line[6:])\n",
+    "        elif line.startswith('+') and not line.startswith('+++'):\n",
+    "            lines_added += 1\n",
+    "        elif line.startswith('-') and not line.startswith('---'):\n",
+    "            lines_removed += 1\n",
+    "    return lines_added, lines_removed, files_changed\n",
+    "\n",
+    "def generate_email_report(commits, code_changes):\n",
+    "    total_lines_added = 0\n",
+    "    total_lines_removed = 0\n",
+    "    all_files_changed = set()\n",
+    "    \n",
+    "    for change in code_changes:\n",
+    "        lines_added, lines_removed, files_changed = extract_metrics_from_diff(change)\n",
+    "        total_lines_added += lines_added\n",
+    "        total_lines_removed += lines_removed\n",
+    "        all_files_changed.update(files_changed)\n",
+    "    \n",
+    "    email_content = f\"\"\"\n",
+    "    Daily Code Review Feedback - {datetime.now().strftime('%Y-%m-%d')}\n",
+    "    \n",
+    "    Summary of Changes:\n",
+    "    - Lines of Code Added: {total_lines_added}\n",
+    "    - Lines of Code Removed: {total_lines_removed}\n",
+    "    - Net LOC Change: {total_lines_added - total_lines_removed}\n",
+    "    - Files Changed: {len(all_files_changed)}\n",
+    "    - Number of Commits: {len(commits)}\n",
+    "    \n",
+    "    Detailed Feedback:\n",
+    "    (Add your detailed feedback here)\n",
+    "    \"\"\"\n",
+    "    \n",
+    "    return email_content\n",
+    "\n",
+    "if __name__ == \"__main__\":\n",
+    "    commits = get_commits_since_midnight()\n",
+    "    if commits:\n",
+    "        code_changes = get_code_from_commits(commits)\n",
+    "        email_report = generate_email_report(commits, code_changes)\n",
+    "        print(email_report)\n",
+    "    else:\n",
+    "        print(\"No commits found since midnight.\")"
    ]
   },
   {
@@ -71,9 +605,7 @@
    "execution_count": null,
    "metadata": {},
    "outputs": [],
-   "source": [
-    "#send formatted email"
-   ]
+   "source": []
   }
  ],
  "metadata": {
diff --git a/test.mermaid b/test.mermaid
new file mode 100644
index 0000000..41fff2a
--- /dev/null
+++ b/test.mermaid
@@ -0,0 +1,16 @@
+graph TD
+A[User Pushes Code to Repository] -->|Webhook Triggered| B[Flask Application Receives Webhook]
+B --> C[Fetch Commits Since Midnight]
+C --> D[Get Code Diffs for Commits]
+D --> E[Extract Metrics from Code Diffs]
+E --> F[Generate Email Report]
+F --> G[Send Email with Feedback]
+
+subgraph "Codebase"
+    B
+    C
+    D
+    E
+    F
+    G
+end
\ No newline at end of file

